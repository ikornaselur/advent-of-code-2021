use std::fmt;
use std::error;
use std::fs::File;
use std::io::prelude::*;

type Result<T> = std::result::Result<T, Box<dyn error::Error>>;

const INPUT: &str = "src/day0/input.txt";

#[derive(Debug, PartialEq)]
struct Day0Error(String);

impl fmt::Display for Day0Error {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Invalid input: {}", self.0)
    }
}
impl error::Error for Day0Error {}

fn main() -> Result<()> {
    println!("Day 0 - Part 1: {}", part1()?);
    println!("Day 0 - Part 2: {}", part2()?);
    Ok(())
}


fn part1() -> Result<i32> {
    let mut file = File::open(INPUT)?;
    let mut contents = String::new();
    file.read_to_string(&mut contents)?;
    let lines = contents.split('\n');

    Ok(0)
}
fn part2() -> Result<i32> {
    let mut file = File::open(INPUT)?;
    let mut contents = String::new();
    file.read_to_string(&mut contents)?;
    let lines = contents.split('\n');

    Ok(0)
}

#[cfg(test)]
mod day0 {
    use super::*;

    #[test]
    fn test_part1() {
        assert_eq!(part1().unwrap(), 0);
    }

    #[test]
    fn test_part2() {
        assert_eq!(part2().unwrap(), 0);
    }
}
